#!/usr/bin/env fish

switch "$argv"
    case 'summary'
        echo "  pg - Manage PostgreSQL docker containers"
    case '*'
        echo "\
pg count
    Counts containers that are running or that have been halted but not removed
pg demo [--save|-s [--url|-u URL]] [--name|-n NAME]
    Create a new database container filled with demo data
    --save takes the database at --name, --url, or DATABASE_URL and dumps it
    into the default demo location.
    The default demo location is $VG_APP_DIR/demo.dump but it can be changed
    by setting the VG_PG_DEMO_LOCATION config value
pg dump [--name|-n NAME] [--url|-u URL]
    Dump the database using pg_dump
pg name [URL]
    Print the name for the database found at URL or DATABASE_URL, if known
pg new [--name|-n NAME]
    Create a new pg container and print its URL
    Optionally provide a name so you can refer to this container directly
pg ping [--name|-n NAME] [--url|-u URL]
    Try to connect to the DB at --name, --url, or DATABASE_URL
pg restore DUMP_FILE [--name|-n NAME] [--url|-u URL]
    Restore the database dumped into DUMP_FILE to a new pg container
    Optionally provide a name so you can refer to this container directly
    If --url is given then restore straight into that DB
pg rm [--name|-n NAME] [--url|-u URL] [--all|-a]
    Halt and remove a pg container
    If neither of --name or --url are provided then use the env DATABASE_URL
    If --all is specified then remove all pg containers
pg shell [--name|-n NAME] [--url|-u URL]
    Drop into a psql shell pointed at --name, --url, or DATABASE_URL
pg url [NAME]
    Print the URL for the database called NAME, if known"
end
